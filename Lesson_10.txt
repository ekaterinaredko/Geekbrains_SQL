**********
** Ex.1 **
**********

mysql> CREATE INDEX idx_users_email ON users(email);
Query OK, 0 rows affected (0,08 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> CREATE INDEX idx_users_phone ON users(phone);
Query OK, 0 rows affected (0,08 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> CREATE INDEX idx_users_last_name_first_name ON users(last_name,first_name);
Query OK, 0 rows affected (0,08 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> CREATE INDEX idx_profiles_birthday ON profiles(birthday);
Query OK, 0 rows affected (0,07 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> CREATE INDEX idx_city_name ON city(name);
Query OK, 0 rows affected (0,07 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> CREATE INDEX idx_country_name ON country(name);
Query OK, 0 rows affected (0,07 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> CREATE INDEX idx_media_types_name ON media_types(name);
Query OK, 0 rows affected (0,03 sec)
Records: 0  Duplicates: 0  Warnings: 0

**********
** Ex.2 **
**********

Имя группы

mysql> SELECT id,name FROM communities ORDER BY id;
+----+-------------+
| id | name        |
+----+-------------+
|  1 | voluptate   |
|  2 | cumque      |
|  3 | quas        |
|  4 | aut         |
|  5 | corrupti    |
|  6 | autem       |
|  7 | itaque      |
|  8 | in          |
|  9 | sed         |
| 10 | pariatur    |
| 11 | alias       |
| 12 | modi        |
| 13 | accusantium |
| 14 | enim        |
| 15 | nemo        |
| 16 | qui         |
| 17 | sit         |
| 18 | distinctio  |
| 19 | suscipit    |
| 20 | earum       |
+----+-------------+
20 rows in set (0,00 sec)

Всего пользователей в системе

mysql> SELECT COUNT(*) AS users_total FROM users;
+-------------+
| users_total |
+-------------+
|         100 |
+-------------+
1 row in set (0,00 sec)

Общее количество уникальных пользователей в группах

mysql> SELECT COUNT(DISTINCT users_id) AS users_communities_total FROM users_communities;
+-------------------------+
| users_communities_total |
+-------------------------+
|                      30 |
+-------------------------+
1 row in set (0,00 sec)

Общее количество пользователей в каждой группе

mysql> SELECT DISTINCT communities_id, COUNT(users_id) OVER (PARTITION BY communities_id) AS users_сommunities_count FROM users_communities;
+----------------+--------------------------+
| communities_id | users_сommunities_count  |
+----------------+--------------------------+
|              1 |                        3 |
|              2 |                        1 |
|              3 |                        4 |
|              4 |                        2 |
|              5 |                        1 |
|              6 |                        2 |
|              7 |                        2 |
|              8 |                        1 |
|              9 |                        2 |
|             10 |                        5 |
|             11 |                        2 |
|             12 |                        1 |
|             13 |                        3 |
|             14 |                        1 |
|             15 |                        2 |
|             16 |                        2 |
|             17 |                        3 |
|             18 |                        2 |
|             19 |                        4 |
|             20 |                        3 |
+----------------+--------------------------+
20 rows in set (0,00 sec)

Cреднее количество пользователей в группах

mysql> SELECT COUNT(DISTINCT users_id)/COUNT(DISTINCT communities_id) AS users_avg FROM users_communities;
+-----------+
| users_avg |
+-----------+
|    1.5000 |
+-----------+
1 row in set (0,00 sec)

Cамый молодой пользователь в группе

mysql> SELECT DISTINCT users_communities.communities_id, FIRST_VALUE(users_communities.users_id) OVER (PARTITION BY users_communities.communities_id ORDER BY profiles.birthday DESC) as min_old
    -> FROM users_communities JOIN profiles ON (users_communities.users_id=profiles.user_id)
    -> ;
+----------------+---------+
| communities_id | min_old |
+----------------+---------+
|              1 |      13 |
|              2 |      11 |
|              3 |      18 |
|              4 |      11 |
|              5 |       1 |
|              6 |      39 |
|              7 |      12 |
|              8 |      10 |
|              9 |      40 |
|             10 |      45 |
|             11 |      11 |
|             12 |      69 |
|             13 |      51 |
|             14 |      61 |
|             15 |      28 |
|             16 |      45 |
|             17 |      13 |
|             18 |       2 |
|             19 |      45 |
|             20 |      12 |
+----------------+---------+
20 rows in set (0,00 sec)

Cамый старший пользователь в группе

mysql> SELECT DISTINCT users_communities.communities_id, FIRST_VALUE(users_communities.users_id) OVER(PARTITION BY users_communities.communities_id ORDER BY profiles.birthday) as max_old
    -> FROM users_communities JOIN profiles ON (users_communities.users_id=profiles.user_id);
+----------------+---------+
| communities_id | max_old |
+----------------+---------+
|              1 |      20 |
|              2 |      11 |
|              3 |      20 |
|              4 |      10 |
|              5 |       1 |
|              6 |      24 |
|              7 |      13 |
|              8 |      10 |
|              9 |      50 |
|             10 |      47 |
|             11 |      31 |
|             12 |      69 |
|             13 |      53 |
|             14 |      61 |
|             15 |      23 |
|             16 |      89 |
|             17 |      87 |
|             18 |       1 |
|             19 |      47 |
|             20 |      14 |
+----------------+---------+
20 rows in set (0,01 sec)

mysql> SELECT DISTINCT communities.id, communities.name,
    -> (SELECT COUNT(DISTINCT users_communities.users_id)/COUNT(DISTINCT users_communities.communities_id) FROM users_communities) AS avg_users,
    -> FIRST_VALUE(users_communities.users_id) OVER(PARTITION BY users_communities.communities_id ORDER BY profiles.birthday DESC) AS min_old,
    -> FIRST_VALUE(users_communities.users_id) OVER(PARTITION BY users_communities.communities_id ORDER BY profiles.birthday) as max_old,
    -> COUNT(users_communities.users_id) OVER(PARTITION BY users_communities.communities_id) AS users_сommunities_count,
    -> (SELECT COUNT(*) FROM users) AS users_total,
    -> (COUNT(users_communities.users_id) OVER(PARTITION BY users_communities.communities_id) / (SELECT count(*) FROM users)*100) AS '%%'
    -> FROM users_communities
    -> JOIN users ON (users.id=users_communities.users_id)
    -> JOIN communities ON (communities.id=users_communities.communities_id)
    -> JOIN profiles ON (profiles.user_id=users_communities.users_id)
    -> ORDER BY id;
+----+-------------+-----------+---------+---------+--------------------------+-------------+--------+
| id | name        | avg_users | min_old | max_old | users_сommunities_count  | users_total | %%     |
+----+-------------+-----------+---------+---------+--------------------------+-------------+--------+
|  1 | voluptate   |    1.5000 |      13 |      20 |                        3 |         100 | 3.0000 |
|  2 | cumque      |    1.5000 |      11 |      11 |                        1 |         100 | 1.0000 |
|  3 | quas        |    1.5000 |      18 |      20 |                        4 |         100 | 4.0000 |
|  4 | aut         |    1.5000 |      11 |      10 |                        2 |         100 | 2.0000 |
|  5 | corrupti    |    1.5000 |       1 |       1 |                        1 |         100 | 1.0000 |
|  6 | autem       |    1.5000 |      39 |      24 |                        2 |         100 | 2.0000 |
|  7 | itaque      |    1.5000 |      12 |      13 |                        2 |         100 | 2.0000 |
|  8 | in          |    1.5000 |      10 |      10 |                        1 |         100 | 1.0000 |
|  9 | sed         |    1.5000 |      40 |      50 |                        2 |         100 | 2.0000 |
| 10 | pariatur    |    1.5000 |      45 |      47 |                        5 |         100 | 5.0000 |
| 11 | alias       |    1.5000 |      11 |      31 |                        2 |         100 | 2.0000 |
| 12 | modi        |    1.5000 |      69 |      69 |                        1 |         100 | 1.0000 |
| 13 | accusantium |    1.5000 |      51 |      53 |                        3 |         100 | 3.0000 |
| 14 | enim        |    1.5000 |      61 |      61 |                        1 |         100 | 1.0000 |
| 15 | nemo        |    1.5000 |      28 |      23 |                        2 |         100 | 2.0000 |
| 16 | qui         |    1.5000 |      45 |      89 |                        2 |         100 | 2.0000 |
| 17 | sit         |    1.5000 |      13 |      87 |                        3 |         100 | 3.0000 |
| 18 | distinctio  |    1.5000 |       2 |       1 |                        2 |         100 | 2.0000 |
| 19 | suscipit    |    1.5000 |      45 |      47 |                        4 |         100 | 4.0000 |
| 20 | earum       |    1.5000 |      12 |      14 |                        3 |         100 | 3.0000 |
+----+-------------+-----------+---------+---------+--------------------------+-------------+--------+
20 rows in set (0,00 sec)

