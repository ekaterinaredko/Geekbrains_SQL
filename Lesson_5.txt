**********
** Ex.1 **
**********

mysql> UPDATE users SET created_at = NOW() where created_at is NULL;
mysql> UPDATE users SET updated_at = NOW() where created_at is NULL;

**********
** Ex.2 **
**********

mysql> ALTER TABLE users CHANGE COLUMN `created_at` `created_at` DATETIME DEFAULT CURRENT_TIMESTAMP, CHANGE COLUMN `updated_at` `updated_at` DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP;

**********
** Ex.3 **
**********

mysql> CREATE TABLE storehouses_product (
    -> id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    -> storehouse_id INT unsigned,
    -> product_id INT unsigned,
    -> value INT unsigned,
    -> created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    -> updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
    -> );
Query OK, 0 rows affected (0,02 sec)

mysql> INSERT INTO storehouses_product (storehouse_id, product_id, value) VALUES (1, 1, 0),(1, 2, 2500),(1, 3, 0),(1, 4, 30),(1, 5, 500),(1, 6, 1);
Query OK, 6 rows affected (0,01 sec)
Records: 6  Duplicates: 0  Warnings: 0

mysql> SELECT value FROM storehouses_product ORDER BY IF(value>0,0,1), value;
+-------+
| value |
+-------+
|     1 |
|    30 |
|   500 |
|  2500 |
|     0 |
|     0 |
+-------+
6 rows in set (0,00 sec)

**********
** Ex.4 **
**********

mysql> SELECT user_id, birthday FROM profiles WHERE MONTHNAME(birthday) IN ('may', 'august');
+---------+------------+
| user_id | birthday   |
+---------+------------+
|       1 | 1983-05-08 |
|      14 | 1979-08-06 |
|      34 | 1990-08-25 |
|      45 | 2021-05-07 |
|      52 | 2011-05-12 |
|      64 | 1989-08-08 |
|      66 | 2003-08-28 |
|      73 | 1981-08-21 |
|      75 | 2009-08-30 |
|      88 | 2008-08-03 |
|      91 | 1994-05-08 |
|      92 | 1987-05-27 |
|      94 | 1991-05-20 |
|      95 | 2016-08-19 |
+---------+------------+
14 rows in set (0,00 sec)

**********
** Ex.5 **
**********

SELECT * FROM catalogs WHERE id IN (5, 1, 2) ORDER BY FIELD(id, 3, 1, 2);

**********
** Ex.6 **
**********

mysql> SELECT ROUND(AVG((TO_DAYS(NOW()) - TO_DAYS(birthday)) / 365.25), 0) AS AVG_Age FROM profiles;
+---------+
| AVG_Age |
+---------+
|      26 |
+---------+
1 row in set (0,01 sec)

**********
** Ex.7 **
**********

mysql> SELECT DATE_FORMAT(DATE(CONCAT_WS('-', YEAR(NOW()), MONTH(birthday), DAY(birthday))), '%W') AS day, COUNT(*) AS total_amount
    -> FROM profiles
    -> GROUP BY day
    -> ORDER BY total_amount DESC;
+-----------+-------+
| day       | total |
+-----------+-------+
| Saturday  |    20 |
| Sunday    |    19 |
| Tuesday   |    15 |
| Thursday  |    13 |
| Wednesday |    12 |
| Monday    |    11 |
| Friday    |    10 |
+-----------+-------+
7 rows in set (0,01 sec)

**********
** Ex.8 **
**********

mysql> SELECT * FROM storehouses_product;
+----+---------------+------------+-------+---------------------+---------------------+
| id | storehouse_id | product_id | value | created_at          | updated_at          |
+----+---------------+------------+-------+---------------------+---------------------+
|  1 |             1 |          1 |     0 | 2021-06-25 22:01:38 | 2021-06-25 22:01:38 |
|  2 |             1 |          2 |  2500 | 2021-06-25 22:01:38 | 2021-06-25 22:01:38 |
|  3 |             1 |          3 |     0 | 2021-06-25 22:01:38 | 2021-06-25 22:01:38 |
|  4 |             1 |          4 |    30 | 2021-06-25 22:01:38 | 2021-06-25 22:01:38 |
|  5 |             1 |          5 |   500 | 2021-06-25 22:01:38 | 2021-06-25 22:01:38 |
|  6 |             1 |          6 |     1 | 2021-06-25 22:01:38 | 2021-06-25 22:01:38 |
+----+---------------+------------+-------+---------------------+---------------------+
6 rows in set (0,00 sec)

mysql> SELECT ROUND(exp(SUM(log(value))), 0) AS factorial FROM storehouses_product;
+-----------+
| factorial |
+-----------+
|  37500000 |
+-----------+
1 row in set, 2 warnings (0,00 sec)